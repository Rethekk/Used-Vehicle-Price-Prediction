# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OWYhnXVk8QP9ihV1tLUdrkBtkiYDiZ1e
"""

import numpy as np
import pandas as pd
train = pd.read_csv('/content/train.csv')
train.head(5)

train

for i in train.index:
  if train.Gear_type.loc[i]=='Automatic':
    train.Gear_type.loc[i]=int(0)
  elif train.Gear_type.loc[i]=='Manual':
    train.Gear_type.loc[i]=int(1)

for i in train.index:
  if train.fuel_type.loc[i]=='Petrol':
    train.fuel_type.loc[i]=int(0)
  elif train.fuel_type.loc[i]=='Diesel':
    train.fuel_type.loc[i]=int(1)
  elif train.fuel_type.loc[i]=='Hybrid':
    train.fuel_type.loc[i]=int(2)
  elif train.fuel_type.loc[i]=='CNG':
    train.fuel_type.loc[i]=int(3)

train = train.drop(columns="location")

train.price=train.price/100000

train.corr()

test=pd.read_csv('/content/test.csv')
test.tail(5)

for i in test.index:
  if test.Gear_type.loc[i]=='Automatic':
    test.Gear_type.loc[i]=int(0)
  elif test.Gear_type.loc[i]=='Manual':
    test.Gear_type.loc[i]=int(1)

for i in test.index:
  if test.fuel_type.loc[i]=='Petrol':
    test.fuel_type.loc[i]=int(0)
  elif test.fuel_type.loc[i]=='Diesel':
    test.fuel_type.loc[i]=int(1)
  elif test.fuel_type.loc[i]=='Hybrid':
    test.fuel_type.loc[i]=int(2)
  elif test.fuel_type.loc[i]=='CNG':
    test.fuel_type.loc[i]=int(3)

test = test.drop(columns="location")

test = test.drop(columns="name")
test.price=test.price/100000

train=train.drop(columns="name")

from sklearn.ensemble import ExtraTreesRegressor
model = ExtraTreesRegressor()
model.fit(train,train.price)

model.feature_importances_

from sklearn import linear_model

regression=linear_model.LinearRegression()

n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200,num = 12)]
max_features = ['auto','sqrt']
max_depth = [int(x) for x in np.linspace(5,30,num = 6)]
min_samples_split = [2,5,10,15,100]
min_samples_leaf  = [1,2,5,10]

grid = {'n_estimators': n_estimators,
        'max_features': max_features,
        'max_depth': max_depth,
        'min_samples_split': min_samples_split,
       'min_samples_leaf': min_samples_leaf}
print(grid)

from sklearn.ensemble import RandomForestRegressor 
from sklearn.model_selection import RandomizedSearchCV
model = RandomForestRegressor() 
hyp = RandomizedSearchCV(estimator = model,param_distributions=grid,n_iter=10,scoring= 'neg_mean_squared_error',cv=5,verbose = 2,random_state = 42,n_jobs = 1) 
hyp.fit(train,train.price)

prediction = hyp.predict(test)
prediction=np.round(prediction)
check=np.round(test.price)
print(str(check[0:5])+"   "+str(prediction[0:5]))

from sklearn.metrics import r2_score
print(r2_score(check,prediction))

from sklearn.metrics import accuracy_score

accuracy_score(check,prediction)

from sklearn.ensemble import AdaBoostRegressor

adareg = AdaBoostRegressor(random_state=45,n_estimators=700)
adareg.fit(train[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']], train.price)
y_pred = adareg.predict(test[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']])
y_pred=np.round(y_pred)
test.price=np.round(test.price)
adareg.score(test.price,y_pred)

from sklearn.ensemble import AdaBoostRegressor
from sklearn.model_selection import RandomizedSearchCV

param_dist = {
 'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200],
 'learning_rate' : [0.01,0.05,0.1,0.3,1],
 'loss' : ['linear', 'square', 'exponential']
 }

pre_gs_inst = RandomizedSearchCV(AdaBoostRegressor(),
 param_distributions = param_dist,
 cv=5,
 n_iter = 10,
 n_jobs=1,
 verbose = 2,random_state = 42)

pre_gs_inst.fit(train[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']], train.price)

predictions=pre_gs_inst.predict(test[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']])

accuracy_score(test.price,np.round(predictions))

from sklearn.datasets import make_regression
from sklearn.ensemble import AdaBoostRegressor
X=train[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']]
Y=train[['price']]
X,Y = make_regression(n_samples=1000, n_features=20, n_informative=15, noise=0.1, random_state=6)
model = AdaBoostRegressor()
model.fit(train[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']], train.price)
pred=model.predict(test[['Gear_type','fuel_type','mileage','volume_of_fuel','year_of_manufacture']])
accuracy_score(np.round(test.price),np.round(predictions))

